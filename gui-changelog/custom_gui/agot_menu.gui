#####################################################
################# AGOT MENU WINDOW ##################
#####################################################

types Main
{
	type agot_version_mismatch_warning = widget
	{
		name = "agot_letter_event"
		parentanchor = center
		layer = windows_layer
		size = { 700 560 } ############ SIZES NEED TO MATCH
		visible = "[And(Not(GetVariableSystem.HasValue('confirmed_inconsistent_game_version', 'true')), GetVariableSystem.HasValue('inconsistent_game_version', 'true'))]"

		state = {
			name = _show
			on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('show')]"
			on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('show')]"

			start_sound = {
				soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
			}
		}

		state = {
			name = _hide
			duration = 1
			on_start = "[PdxGuiWidget.AccessChild('letter_paper').TriggerAnimation('hide')]"
			on_start = "[PdxGuiWidget.AccessChild('letter_content').TriggerAnimation('hide')]"
		}

		state = {
			name = confirmed
			next = _hide
			trigger_when = "[GetVariableSystem.HasValue('confirmed_inconsistent_game_version', 'true')]"
		}

		widget = {
			name = "letter_paper" # don't change
			size = { 700 45 }
			widgetanchor = center
			parentanchor = center
			alpha = 0

			using = Window_Background
			using = Window_Decoration_Spike

			state = {
				name = show
				next = a

				using = Animation_FadeIn_Standard

				animation = {
					alpha = 1
					bezier = { 0.7 0 0.7 1 }
				}
			}

			state = {
				name = a
				duration = 0.25
				bezier = { 0.3 0 0.7 1 }

				animation = {
					size = { 700 560 } ############ SIZES NEED TO MATCH
					bezier = { 0.8 0.3 0 1 }
				}

				animation = {
					alpha = 1
					bezier = { 0.7 0 0.7 1 }
				}
			}

			state = {
				name = hide
				using = Animation_FadeOut_Quick
				size = { 600 -1 }
			}

			vbox = {
				name = "letter_content"

				state = {
					name = show
					delay = 0.8

					using = Animation_FadeIn_Standard

					animation = {
						size = { 700 560 } ############ SIZES NEED TO MATCH

						bezier = { 0.8 0.3 0 1 }
					}

					animation = {
						alpha = 1
						bezier = { 0.7 0 0.7 1 }
					}
				}

				state = {
					name = hide
					using = Animation_FadeOut_Quick
					duration = 0.08
				}

				scrollarea = {
					maximumsize = { 600 360 }
					minimumsize = { 600 360 }
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresizescrollarea = yes
					scrollbarpolicy_horizontal = always_off

					scrollbar_vertical = {
						using = Scrollbar_Vertical
					}

					scrollwidget = {
						text_multi = {
							name = "description"
							maximumsize = { 600 -1 }
							autoresize = yes
							margin = { 30 10 }
							alwaystransparent = yes
							text = "VERSION_MISMATCH_DESCRIPTION"
							fontsize = 20
						}
					}
				}

				### Options
				flowcontainer = {
					direction = vertical
					spacing = 5
					flowcontainer = {
						name = "option_1"
						button_primary_big = {
							name = "event_option_button_1"
							parentanchor = hcenter|vcenter
							size = { 600 42 }
							enabled = "[Not(GetVariableSystem.Exists('confirmed_inconsistent_game_version'))]"
							onclick = "[GetVariableSystem.Set('confirmed_inconsistent_game_version', 'true')]"
							tooltip = "VERSION_MISMATCH_CONFIRM_TOOLTIP"

							hbox = {
								margin_bottom = 6
								text_single = {
									text = "VERSION_MISMATCH_CONFIRM"
									using = Font_Size_Medium
									align = center
									layoutpolicy_horizontal = expanding
									max_width = 600
									fontsize_min = 12
								}
							}
							tooltipwidget = {
								using = DefaultTooltipWidget
							}
							using = tooltip_es
							animation_glow_event = {
								name = "dangerous_option"
								using = Color_White
							}
						}
					}

					flowcontainer = {
						name = "option_2"
						button_primary_big = {
							name = "event_option_button_2"
							parentanchor = hcenter|vcenter
							size = { 600 42 }
							onclick = "[FrontEndMainView.OnQuit]"
							tooltip = "VERSION_MISMATCH_EXIT_TOOLTIP"

							hbox = {
								margin_bottom = 6
								text_single = {
									text = "EXIT_TO_DESKTOP"
									using = Font_Size_Medium
									align = center
									layoutpolicy_horizontal = expanding
									max_width = 600
									fontsize_min = 12
								}
							}
							tooltipwidget = {
								using = DefaultTooltipWidget
							}
							using = tooltip_es
							animation_glow_event = {
								name = "exit_option"
								using = Color_Red
							}
						}
					}
				}
			}
		}
	}
}

template Version_Warning
{
	state = {
		name = fail
		next = _show
		on_start = "[GetVariableSystem.Set('inconsistent_game_version', 'true')]"
		trigger_when = "[Not(ObjectsEqual(GetGameVersionInfoShort, Localize('AGOT_REQUIRED_VERSION')))]"
	}
	state = {
		name = pass
		next = _show
		on_start = "[GetVariableSystem.Set('inconsistent_game_version', 'false')]"
		trigger_when = "[ObjectsEqual(GetGameVersionInfoShort, Localize('AGOT_REQUIRED_VERSION'))]"
	}
}

template Version_Detection
{
	visible = "[Or(GetVariableSystem.HasValue('inconsistent_game_version', 'false'), And(GetVariableSystem.HasValue('inconsistent_game_version', 'true'), GetVariableSystem.Exists('confirmed_inconsistent_game_version')))]"
	state = {
		name = _show
		using = Animation_FadeIn_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_show"
		}
	}
	state = {
		name = _hide
		using = Animation_FadeOut_Standard
		start_sound = {
			soundeffect = "event:/SFX/UI/Frontend/sfx_ui_frontend_window_hide"
		}
	}
	state = {
		name = clear
		next = _hide
		trigger_when = "[GetVariableSystem.HasValue('inconsistent_game_version', 'true')]"
	}
	state = {
		name = confirmed
		next = _show
		trigger_when = "[GetVariableSystem.HasValue('confirmed_inconsistent_game_version', 'true')]"
	}
}