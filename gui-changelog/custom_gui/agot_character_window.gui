###########################################################
################# AGOT CHARACTER WINDOW ###################
###########################################################

types CharacterWindow
{
	#################
	# DEBUG BUTTONS #
	#################
	type agot_portrait_editor_button = button
	{
		name = "portrait_editor_button"
		size = { 60 40 }
		raw_text = "portrait"

		using = editor_button
		onclick = "[CharacterWindow.OnCopyPortrait]"
		onclick = "[ExecuteConsoleCommand('pe')]"
		visible = "[InDebugMode]"
		fontcolor = { 1.0 1.0 1.0 1.0 }
	}

	#########################
	# HIDDEN CHARACTER VIEW #
	#########################
	type agot_hidden_character_view = vbox
	{
		name = "main_content_hidden"
		using = Window_Margins_Sidebar
		visible = "[IsCharacterHidden]"

		# Character box
		widget = {
			size = { 620 40 }

			buttons_window_control = {
				parentanchor = top|right

				blockoverride "extra_buttons"
				{
					icon = {
						visible = "[And( InDebugMode, Not( Character.AccessDenied ) )]"
						size = { 30 30 }
						texture = "gfx/interface/icons/icon_group_of_characters.dds"
						tooltip = "CHARACTER_AI_VALUES_DEBUG_TOOLTIP"
					}
				}

				blockoverride "button_close"
				{
					onclick = "[CharacterWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_me"
				{
					visible = "[Not(Character.IsLocalPlayer)]"
					onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
				}
			}

			watch_window_button = {
				parentanchor = top|hcenter
				size = { 60 40 }
				onclick = "[AddWatchWindow( CharacterWindow.GetCharacter.MakeScope )]"
			}
		}
		expand = {}

		background = {
			visible = "[IsCharacterRuin]"
			texture = "gfx/interface/illustrations/character_view/ruins.dds"
			fittype = centercrop

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_rough_edges_right.dds"
				blend_mode = alphamultiply
			}
		}

		background = {
			visible = "[IsCharacterUnknown]"
			texture = "gfx/interface/illustrations/character_view/unknown.dds"

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_rough_edges_right.dds"
				blend_mode = alphamultiply
			}
		}

		background = {
			visible = "[IsCharacterWilderness]"
			texture = "gfx/interface/illustrations/character_view/wilderness.dds"
			fittype = centercrop

			modify_texture = {
				texture = "gfx/interface/component_masks/mask_rough_edges_right.dds"
				blend_mode = alphamultiply
			}
		}

		## Name
		hbox = {
			layoutpolicy_horizontal = expanding

			text_multi = {
				visible = "[IsCharacterRuin]"
				margin = { 20 10 }
				max_width = 560

				background = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					color = { 0 0 0 0.25 }
					texture_density = 2
				}

				text = "ruin_history_generic"
				default_format = "#high;SIZE:20;glow_color:{0,0,0,1}"
				autoresize = yes
			}

			text_multi = {
				visible = "[IsCharacterUnknown]"
				margin = { 20 10 }
				max_width = 560

				background = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					color = { 10 10 10 0.25 }
					texture_density = 2
				}

				text = "unknown_generic"
				default_format = "#light_background;SIZE:20"
				autoresize = yes
			}

			text_multi = {
				visible = "[IsCharacterWilderness]"
				margin = { 20 10 }
				max_width = 560

				background = {
					texture = "gfx/interface/component_masks/mask_rough_edges.dds"
					spriteType = Corneredtiled
					spriteborder = { 20 20 }
					color = { 0 0 0 0.25 }
					texture_density = 2
				}

				text = "wilderness_generic"
				default_format = "#high;SIZE:20;glow_color:{0,0,0,1}"
				autoresize = yes
			}
		}
		expand = {}
	}

	######################
	# NAME FLAVOR FILTER #
	######################
	type agot_name_flavorization = container
	{
		ignoreinvisible = yes

		text_single = {
			name = "character_name"
			visible = "[GetScriptedGui('agot_name').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_CHARACTER_COMMA
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#medium"
			tooltip = AGOT_NAME_CHARACTER_TOOLTIP
		}

		text_single = {
			name = "character_name_unlanded"
			visible = "[GetScriptedGui('agot_name_unlanded').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_UNLANDED_CHARACTER_COMMA
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_UNLANDED_CHARACTER_TOOLTIP
		}

		text_single = {
			name = "character_name_high_septon"
			visible = "[GetScriptedGui('agot_high_septon').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_HIGH_SEPTON_COMMA
			margin_left = 0
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = "[Character.GetNickname]"
		}

		text_single = {
			name = "character_name_knight"
			visible = "[GetScriptedGui('agot_ser_knight').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_SER_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_SER_TOOLTIP
		}

		text_single = {
			name = "character_name_maester"
			visible = "[GetScriptedGui('agot_maester').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_MAESTER_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_MAESTER_TOOLTIP
		}

		text_single = {
			name = "character_name_silent_sister"
			visible = "[GetScriptedGui('agot_silent_sister').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_SILENT_SISTER_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_SILENT_SISTER_TOOLTIP
		}

		text_single = {
			name = "character_name_bastard"
			visible = "[GetScriptedGui('agot_name_bastard').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_BASTARD_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_BASTARD_TOOLTIP
		}

		text_single = {
			name = "character_name_knight_bastard"
			visible = "[GetScriptedGui('agot_ser_knight_bastard').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_NAME_SER_BASTARD_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_NAME_SER_BASTARD_TOOLTIP
		}

		text_single = {
			name = "character_birthplace_nickname"
			visible = "[GetScriptedGui('agot_birthplace_surname').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_BIRTHPLACE_BASED_NICKNAME_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_BIRTHPLACE_BASED_NICKNAME_TOOLTIP
		}

		text_single = {
			name = "character_ser_birthplace_nickname"
			visible = "[GetScriptedGui('agot_ser_birthplace_surname').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			text = AGOT_SER_BIRTHPLACE_BASED_NICKNAME_COMMA
			margin_left = 2
			max_width = 398
			fontsize = 20
			fontsize_min = 14
			align = nobaseline
			default_format = "#high"
			tooltip = AGOT_SER_BIRTHPLACE_BASED_NICKNAME_TOOLTIP
		}
	}

	##################
	# AI STRESS ICON #
	##################
	type agot_ai_stress_icon = container
	{
		visible = "[And(Character.IsAlive, Not(Character.IsLocalPlayer))]"
		tooltip = "AGOT_AI_STRESS_TOOLTIP"
		using = tooltip_es

		widget = {
			visible = "[Not(GreaterThanOrEqualTo_int32(Character.GetStressLevel, '(int32)3'))]"
			size = { 100% 100%}

			using = Animation_ShowHide_Standard

			background = {
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				color = { 0.15 0.15 0.15 1 }
				margin = { 12 12 }
			}
		}

		widget = {
			visible = "[GreaterThanOrEqualTo_int32(Character.GetStressLevel, '(int32)3')]"
			parentanchor = center
			size = { 180% 180% }
			using = Animation_ShowHide_Standard

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/component_masks/mask_fade_circle.dds"
				using = Color_Red
				alpha = 0

				state = {
					name = a
					next = b
					trigger_on_create = yes
					alpha = 0.5
					duration = 0.4
					using = Animation_Curve_Default
				}

				state = {
					name = b
					next = a
					alpha = 0
					duration = 1
					using = Animation_Curve_Default
				}
			}
		}

		icon = {
			parentanchor = vcenter
			size = { 35 35 }
			texture = "gfx/interface/icons/stress/icon_stress_level.dds"
			framesize = { 70 70 }
			frame = "[IntToFrameIndex( Character.GetStressLevel )]"


			modify_texture = {
				visible = "[GreaterThanOrEqualTo_int32(Character.GetStressLevel, '(int32)2')]"
				name = "glow"
				texture = "gfx/interface/colors/gold.dds"
				blend_mode = colordodge
				alpha = 0
			}

			state = {
				name = a
				next = b
				duration = 0.4
				trigger_on_create = yes
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					alpha = 0.3
				}
			}

			state = {
				name = b
				next = a
				duration = 1
				using = Animation_Curve_Default

				modify_texture = {
					name = "glow"
					alpha = 0
				}
			}
		}
	}

	###########################
	# TRAIT BUTTONS AND BOXES #
	###########################
	type agot_trait_expanding_button = button_standard_hover
	{
		layoutpolicy_horizontal = fixed
		size = { 500 57 }
		button_ignore = none
		onclick = "[CharacterWindow.ToggleExpandedTraits]"
		using = tooltip_nw
		tooltip = "OUTLINER_EXPAND"

		hbox_traits_list = {
			name = "tutorial_highlight_traits"
			datacontext = "[CharacterWindow.GetTraitArrays]"
			margin_bottom = 2
		}
	}

	type agot_expanded_traits_vbox = vbox
	{
		spacing = 10
		datacontext = "[CharacterWindow.GetTraitArrays]"

		text_label_center = {
			text = "TRAITS"
		}

		vbox = {
			name = "personality_traits_list"
			datamodel = "[TraitArrays.GetPersonalityTraits]"
			layoutpolicy_horizontal = expanding

			item = { agot_trait_item_vbox = {} }
		}

		vbox = {
			name = "traits_list"
			datamodel = "[TraitArrays.GetTraits]"
			layoutpolicy_horizontal = expanding

			item = { agot_trait_item_vbox = {} }
		}
	}

	type agot_trait_item_vbox = vbox
	{
		layoutpolicy_horizontal = expanding
		spacing = 5
		hbox = {
			layoutpolicy_horizontal = expanding
			text_label_left = {
				layoutpolicy_horizontal = expanding
				text = "[Trait.GetNameNoTooltipWithDefault( Character.Self )]"
				default_format = "#high"
			}
		}
		hbox = {
			layoutpolicy_horizontal = expanding
			vbox = {
				layoutpolicy_vertical = expanding
				margin_right = 10
				icon_trait = {}
				expand = {}
			}
			vbox = {
				text_multi = {
					name = "trait_description"
					layoutpolicy_horizontal = expanding
					autoresize = yes
					max_width = 528
					text = "[Trait.GetFullDescription( Character.Self, Character.GetFaith )]"
				}
			}
			expand = {}
		}
		expand = {}
	}

	type agot_expanded_modifiers_vbox = vbox
	{
		layoutpolicy_horizontal = expanding
		datamodel = "[CharacterWindow.GetTimedModifiers]"
		spacing = 10
		margin_left = 12

		text_label_center = {
			text = "MODIFIERS"
		}

		text_single = {
			visible = "[IsDataModelEmpty(CharacterWindow.GetTimedModifiers)]"
			text = "CV_NO_MODIFIERS"
			default_format = "#low;italic"
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			datamodel = "[CharacterWindow.GetTimedModifiers]"
			spacing = 15

			item = {
				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 2

					hbox = {
						layoutpolicy_horizontal = expanding
						text_label_left = {
							layoutpolicy_horizontal = expanding
							text = "[ModifierItem.GetStaticModifier.GetName]"
							default_format = "#high"
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						vbox = {
							layoutpolicy_vertical = expanding
							hbox = {
								vbox = {
									layoutpolicy_vertical = expanding
									visible = "[ModifierItem.HasTooltipDataByTag('single_modifier')]"
									margin_top = 6
									margin_right = 10

									icon = {
										size = { 32 32 }
										texture = "[ModifierItem.GetIcon]"
									}
									expand = {}
								}

								vbox = {
									textbox = {
										layoutpolicy_horizontal = expanding
										visible = "[ModifierItem.HasTooltipDataByTag('single_modifier')]"
										datacontext = "[ModifierItem.GetSingleModifierTooltipData]"
										max_width = 500
										using = DefaultTooltipText
										multiline = yes
										text = "[TimedModifierSingleItem.GetDesc]"
										alwaystransparent = no
									}
								}
							}
							expand = {}
						}
						expand = {}
					}

					vbox = {
						visible = "[ModifierItem.HasTooltipDataByTag('preview_list')]"
						datacontext = "[ModifierItem.GetPreviewList]"
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							vbox = {
								layoutpolicy_vertical = expanding
								hbox = {
									vbox = {
										layoutpolicy_vertical = expanding
										margin_top = 6
										margin_right = 10

										icon = {
											size = { 32 32 }
											texture = "[ModifierItem.GetIcon]"
										}
										expand = {}
									}

									vbox = {
										textbox = {
											layoutpolicy_horizontal = expanding
											max_width = 500
											using = DefaultTooltipText
											multiline = yes
											text = "[TimedModifierPreviewList.GetScaledDesc]"
											alwaystransparent = no
										}

										vbox = {
											datamodel = "[TimedModifierPreviewList.GetItems]"
											layoutpolicy_horizontal = expanding
											max_width = 500

											item = {
												vbox = {
													layoutpolicy_horizontal = expanding

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[TimedModifierPreviewItem.GetTitle]"
													}

													text_single = {
														layoutpolicy_horizontal = expanding
														text = "[TimedModifierPreviewItem.GetExpirationDate]"
													}
													expand = {}
												}
											}
										}
									}
								}
								expand = {}
							}
							expand = {}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						visible = "[ModifierItem.HasTooltipDataByTag('scaled_single_modifier')]"
						datacontext = "[ModifierItem.GetScaledSingleModifierTooltipData]"

						hbox = {
							layoutpolicy_horizontal = expanding
							vbox = {
								layoutpolicy_vertical = expanding
								hbox = {
									vbox = {
										layoutpolicy_vertical = expanding
										visible = "[ModifierItem.HasTooltipDataByTag('single_modifier')]"
										margin_top = 6
										margin_right = 10

										icon = {
											size = { 32 32 }
											texture = "[ModifierItem.GetIcon]"
										}
										expand = {}
									}

									vbox = {
										textbox = {
											layoutpolicy_horizontal = expanding
											max_width = 500
											using = DefaultTooltipText
											multiline = yes
											text = "[TimedModifierScaledSingleItem.GetDesc]"
											alwaystransparent = no
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											datamodel = "[TimedModifierScaledSingleItem.GetEffectItems]"

											item = {
												textbox = {
													layoutpolicy_horizontal = expanding
													max_width = 500
													margin_top = 5
													margin_left = 10
													margin_right = 5
													margin_bottom = 10
													using = DefaultTooltipText
													using = Background_Area
													text = "[CString.GetString]"
													alwaystransparent = no
												}
											}
										}

										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 500
											text = "[TimedModifierScaledSingleItem.GetExpirationDate]"
										}
									}
								}
								expand = {}
							}
							expand = {}
						}
					}
				}
			}
		}
	}

	######################
	# PERSONAL COA ENTRY #
	######################
	type agot_personal_coat_of_arms = agot_coa_house_small
	{
		visible = "[GetScriptedGui('agot_has_personal_coa').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End)]"
		datacontext = "[CharacterWindow.GetCharacter.GetRelationOfType( GetRelation( 'agot_personal_coa_slave' ) ).GetHouse]"
		position = { -33 50 }
		blockoverride "coa_tooltip" {
		}
		tooltipwidget = {
			using = agot_personal_coa_tooltip
		}
		blockoverride "coa_button" {
		}
		flowcontainer = {
			parentanchor = bottom|right
			position = { 0 5 }
			ignoreinvisible = yes
			button_find_title = {
				visible = "[Character.IsPlayer]"
				onmousehierarchyenter = "[GetScriptedGui('agot_summon_personal_coa_slave').Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).End )]"
				onclick = "[OpenHouseCustomizationWindow(DynastyHouse.Self)]"
				tooltip = CUSTOMIZE_PERSONAL_ARMS
				size = { 22 22 }
			}
		}
	}

	#####################
	# RELATIONSHIP ROWS #
	#####################
	type agot_paramour_relationship_row = vbox_character_row_item
	{
		name = "paramour"
		visible = "[GetScriptedGui('agot_can_have_paramour').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End)]"
		layoutpolicy_vertical = expanding
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'paramour' ) )]"
		}
		blockoverride "header_text"
		{
			text = "PARAMOUR_LABEL"
		}
		blockoverride "expand_button" {}
	}

	type agot_lovers_plus_two = vbox_character_row_relationship_item
	{
		name = "lovers_plus_two"
		visible = "[And(CharacterWindow.GetCharacter.IsAdult, Or(And(CharacterShowingSquires, Not(CharacterWindow.GetCharacter.HasActiveDiarchy)), And(Not(CharacterShowingSquires), And(CharacterShowingKnight, CharacterWindow.GetCharacter.HasActiveDiarchy))))]"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )]"
		}

		blockoverride "header_text"
		{
			text = "LOVERS_LABEL"
		}

		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)3' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)3' )|=]"
		}

		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)3' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'lovers' )]"
		}

		blockoverride "gridbox_slots"
		{
			maxhorizontalslots = 3
		}
	}

	type agot_lovers_plus_three = vbox_character_row_relationship_item
	{
		name = "lovers_plus_three"
		visible = "[And(And(CharacterWindow.GetCharacter.IsAdult, CharacterWindow.GetCharacter.HasActiveDiarchy), CharacterShowingSquires)]"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding

		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) )]"
		}

		blockoverride "header_text"
		{
			text = "LOVERS_LABEL"
		}

		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)2' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)2' )|=]"
		}

		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'lover' ) ) ), '(int32)2' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'lovers' )]"
		}

		blockoverride "gridbox_slots"
		{
			maxhorizontalslots = 2
		}
	}

	type agot_squire_relationship_row = vbox_character_row_item
	{
		name = "squires"
		visible = "[CharacterShowingSquires]"
		layoutpolicy_vertical = expanding
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'agot_squire' ) )]"
		}
		blockoverride "header_text"
		{
			text = "SQUIRES_LABEL"
		}
		blockoverride "expand_button" {}
		blockoverride "find_partner"
		{
			### FIND SQUIRE FOR ME
			fixedgridbox = {
				name = "educate_squire"
				datamodel = "[GetNullCharacterDataModel( CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'agot_squire' ), '(int32)2' ) )]"
				visible = "[Character.IsPlayerInteractionShown('agot_educate_squire_interaction')]"
				flipdirection = yes
				addcolumn = 85
				addrow = 90
				maxverticalslots = 1
				maxhorizontalslots = 2
				item = {
					container = {
						portrait_head_small = {
							blockoverride "portrait_button_template_onclick"
							{
								onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction( 'agot_educate_squire_interaction' )]"
								enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionShown( 'agot_educate_squire_interaction' )]"
								button_icon = {
									parentanchor = center
									alwaystransparent = yes
									size = { 26 26 }
									position = {-2 -4}
									texture = "gfx/interface/icons/flat_icons/plus.dds"
								}
							}
							blockoverride "portrait_button_template_tooltip"
							{
								tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip( 'agot_educate_squire_interaction' )]"
							}
						}
					}
				}
			}
			### FIND SQUIRE FOR COURTIER
			fixedgridbox = {
				name = "find_squire"
				datamodel = "[GetNullCharacterDataModel( CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'agot_squire' ), '(int32)2' ) )]"
				visible = "[Character.IsPlayerInteractionShown('agot_offer_squire_interaction')]"
				flipdirection = yes
				addcolumn = 85
				addrow = 90
				maxverticalslots = 1
				maxhorizontalslots = 2
				item = {
					container = {
						portrait_head_small = {
							blockoverride "portrait_button_template_onclick"
							{
								onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction( 'agot_offer_squire_interaction' )]"
								enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionShown( 'agot_offer_squire_interaction' )]"
								button_icon = {
									parentanchor = center
									alwaystransparent = yes
									size = { 20 20 }
									position = {-2 -5}
									texture = "gfx/interface/icons/flat_icons/plus.dds"
								}
							}
							blockoverride "portrait_button_template_tooltip"
							{
								tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip( 'agot_offer_squire_interaction' )]"
							}
						}
					}
				}
			}
		}
	}

	type agot_knight_relationship_row = vbox_character_row_item
	{
		name = "knights"
		visible = "[CharacterShowingKnight]"
		layoutpolicy_vertical = expanding
		blockoverride "minimum_width" {}
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'agot_knight' ) )]"
		}
		blockoverride "header_text"
		{
			text = "KNIGHT_LABEL"
			max_width = 75
		}
		blockoverride "expand_button" {}
		blockoverride "find_partner"
		{
			### FIND KNIGHT FOR COURTIER
			fixedgridbox = {
				name = "find_knight"
				datamodel = "[GetNullCharacterDataModel( CharacterWindow.CalcUnusedRelationSlots( GetRelation( 'agot_knight' ), '(int32)1' ) )]"
				visible = "[Character.IsPlayerInteractionValid('agot_offer_knight_tutelage_interaction')]"
				flipdirection = yes
				addcolumn = 85
				addrow = 90
				maxverticalslots = 1
				maxhorizontalslots = 1
				item = {
					container = {
						portrait_head_small = {
							blockoverride "portrait_button_template_onclick"
							{
								onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction( 'agot_offer_knight_tutelage_interaction' )]"
								enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid( 'agot_offer_knight_tutelage_interaction' )]"
								button_icon = {
									parentanchor = center
									alwaystransparent = yes
									size = { 26 26 }
									position = {-2 -4}
									texture = "gfx/interface/icons/flat_icons/plus.dds"
								}
							}
							blockoverride "portrait_button_template_tooltip"
							{
								tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip( 'agot_offer_knight_tutelage_interaction' )]"
							}
						}
					}
				}
			}
		}
	}

	type agot_bodyguard_relationship_row = vbox_character_row_item
	{
		name = "bodyguard"
		visible = "[GetScriptedGui('agot_can_have_bodyguard').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End)]"
		layoutpolicy_vertical = expanding
		blockoverride "minimum_width" {}
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'bodyguard' ) )]"
		}
		blockoverride "header_text"
		{
			text = "BODYGUARD_LABEL"
			max_width = 75
		}
		blockoverride "expand_button" {}
	}

	type agot_bodyguard_target_relationship_row = vbox_character_row_item
	{
		name = "bodyguard_target"
		visible = "[GetScriptedGui('agot_can_have_bodyguard_target').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End)]"
		layoutpolicy_vertical = expanding
		blockoverride "minimum_width" {}
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'bodyguard_target' ) )]"
		}
		blockoverride "header_text"
		{
			text = "BODYGUARD_TARGET_LABEL"
			max_width = 75
		}
		blockoverride "expand_button" {}
	}

	type agot_friends_with_bodyguards = vbox_character_row_relationship_item
	{
		name = "friends_with_bodyguards"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		visible = "[And(CharacterHasBodyguard, Not(CharacterHasDragon))]"

		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
			maxhorizontalslots = 6
		}

		blockoverride "header_text"
		{
			text = "FRIENDS_LABEL"
		}

		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )|=]"
		}

		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
		}
	}

	type agot_friends_with_both = vbox_character_row_relationship_item
	{
		name = "friends_with_both"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		visible = "[And(CharacterHasBodyguard, CharacterHasDragon)]"

		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
			maxhorizontalslots = 6
		}

		blockoverride "header_text"
		{
			text = "FRIENDS_LABEL"
		}

		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)5' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)5' )|=]"
		}

		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)5' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
		}
	}

	#############################
	# DRAGONS RELATIONSHIP ROWS #
	#############################
	type agot_dragons_relationship_row = vbox_character_row_relationship_item
	{
		name = "dragons"
		visible = "[GetScriptedGui('agot_can_have_dragon').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End)]"
		layoutpolicy_vertical = expanding
		blockoverride "minimum_width" {}
		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'agot_dragon' ) )]"
		}
		blockoverride "portrait_texture" {
			#I'm scaling the portrait texture by the same amount here as in the below "portrait_transformation" to zoom in on the head. This couldn't be done with regular camera as the baby dragon would go off-frame
			portrait_texture = "[Character.GetPortrait('environment_body', 'camera_dragon_small', 'dragon_head', Multiply_CVector2f( PdxGetWidgetScreenSize(PdxGuiWidget.Self) , '(CVector2f)9,9'))]"
		}

		blockoverride "header_text"
		{
			text = "DRAGON_LABEL"
			max_width = 75
		}
		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'agot_dragon' ) ) ), '(int32)3' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'agot_dragon' ) ) ), '(int32)3' )|=]"
		}
		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'agot_dragon' ) ) ), '(int32)3' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'agot_dragons' )]"
		}
	}

	type agot_friends_with_dragons = vbox_character_row_relationship_item
	{
		name = "friends_with_dragons"
		layoutpolicy_vertical = expanding
		layoutpolicy_horizontal = expanding
		visible = "[And(Not(CharacterHasBodyguard), CharacterHasDragon)]"

		blockoverride "portrait_datamodel" {
			datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) )]"
			maxhorizontalslots = 6
		}

		blockoverride "header_text"
		{
			text = "FRIENDS_LABEL"
		}

		blockoverride "remaining_items"
		{
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )]"
			text = "[GetNumberAbove_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )|=]"
		}

		blockoverride "expand_button_inside" {
			visible = "[GreaterThan_int32( GetDataModelSize( CharacterWindow.GetRelationsOfType( GetRelation( 'friend' ) ) ), '(int32)6' )]"
			onclick = "[CharacterWindow.ToggleExpandedRelation( 'friends' )]"
		}
	}

	type agot_knight_tree_button = button_knight_tree
	{
		name = "knight_tree_button"
		visible = "[And(And(GetPlayer.IsValid, Not(IsObserver)),GetScriptedGui('agot_knight_tree_check').IsShown(GuiScope.SetRoot(CharacterWindow.GetCharacter.MakeScope).End))]"
		datacontext = "[CharacterWindow.GetCharacter]"
		size = { 30 30 }

		onclick = "[GetVariableSystem.Toggle('knight_tree_visible')]"
		onclick = "[GetScriptedGui('agot_open_knight_tree').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('opened_character', Character.MakeScope).End)]"
		using = tooltip_ne
		tooltip = "KNIGHT_TREE_TT"
	}
}