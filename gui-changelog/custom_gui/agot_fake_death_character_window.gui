#################################################################
############### AGOT FAKE DEATH PORTRAIT TYPES #################
#################################################################

types CharacterWindow
{
	type agot_fake_death_character_view = vbox
	{
		name = "main_content"
		using = Window_Margins_Sidebar
		using = visible_if_fake_death

		###############
		# Character box
		widget = {
			name = "main_characters"
			datacontext = "[GetIllustration( 'character_view_bg' )]"
			layoutpolicy_horizontal = expanding
			size = { 0 325 }


			widget = {
				size = { 100% 100% }
				using = Animation_Character_Window_Refresh

				background = {
					texture = "[Illustration.GetTexture( Character.MakeScope )]"
					fittype = centercrop
					margin_bottom = 5
					margin_left = 1

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_rough_edges_down_right.dds"
						spriteType = Corneredtiled
						spriteborder = { 20 20 }
						blend_mode = alphamultiply
						texture_density = 2
					}
				}
			}

			### Primary Spouse
			container_secondary = {
				visible = "[CharacterWindow.ShouldShowSecondary]"
				position = { 60 0 }
			}

			### Main Character
			portrait_character_view_main = {
				name = "tutorial_highlight_main_character_button"
				parentanchor = bottom|left
				position = { 60 0 }

				using = Animation_Character_Window_Refresh_Short

				blockoverride "portrait_button" 
				{
					using = tooltip_es
					tooltip_offset = { -50 0 }
				}

				blockoverride "prison_bars" {
					highlight_icon = {
						parentanchor = center
						name = "prison_bars"
						visible = "[Character.IsImprisoned]"
						visible_at_creation = no
						size = { 33% 100% }

						effectname = "NoHighlight"
						texture = "gfx/portraits/portrait_prison_character_view.dds"

						modify_texture = {
							name = "mask"
							texture = "gfx/portraits/portrait_mask_character_view.dds"
							spriteType = Corneredstretched
							blend_mode = alphamultiply
						}
					}
				}

				blockoverride "portrait_opinion"
				{
					vassal_stance_icon = {
						name = "vassal_stance"
						size = { 20 20 }
					}
				}
			}

			secondary_widget = {
				visible = "[CharacterWindow.ShouldShowSecondary]"
				position = { 310 0 }
			}

			buttons_window_control = {
				parentanchor = top|right

				blockoverride "extra_buttons"
				{
					icon = {
						visible = "[And( InDebugMode, Not( Character.AccessDenied ) )]"
						size = { 30 30 }
						texture = "gfx/interface/icons/icon_group_of_characters.dds"
						tooltip = "CHARACTER_AI_VALUES_DEBUG_TOOLTIP"
					}

					button_copy = {
						visible = "[And( InDebugMode, Not( Character.AccessDenied ) )]"
						size = { 30 30 }
						onclick = "[Character.CopyCharacterDna]"
						raw_tooltip = "Copy DNA"
					}

					button_copy = {
						visible = "[And( InDebugMode, Not( Character.AccessDenied ) )]"
						size = { 30 30 }
						onclick = "[Character.CopyCharacterPersistentDna]"
						raw_tooltip = "Copy Persistent DNA"
					}
				}

				blockoverride "button_close"
				{
					onclick = "[CharacterWindow.Close]"
				}

				blockoverride "button_back"
				{
					visible = "[HasViewHistory]"
					onclick = "[OpenFromViewHistory]"
					tooltip = "[GetViewHistoryTooltip]"
				}

				blockoverride "button_me"
				{
					visible = "[Not(Character.IsLocalPlayer)]"
					onclick = "[DefaultOnCharacterClick(GetPlayer.GetID)]"
				}

				blockoverride "button_pin" {
					visible = "[Not( Character.AccessDenied )]"
				}

				background = {
					using = Background_Area_Solid
					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = alphamultiply
					}
					alpha = 0.7
					margin_left = 30
					margin_right = 30
				}
			}

			### DEBUG STUFF, please make sure those are visible and usable, especially the watch button, type "watch" into the console to show it
			widget = {
				name = "debug_buttons"
				size = { 200 50 }
				parentanchor = top|left
				position = { 175 20 }
				visible = "[InDebugMode]"
				allow_outside = yes

				# Debug personality
				vbox = {
					hbox = {
						spacing = 15
						button = {
							using = editor_button
							name = "ai_watch_button"
							size = { 80 20 }
							raw_text = "AI Watch"
							align = center|nobaseline
							onclick = "[CharacterWindow.OnAIWatch]"
							visible = "[AIWatchWindowsEnabled]"
							fontcolor = { 1.0 1.0 1.0 1.0 }
						}

						watch_window_button = {
							size = { 60 40 }
							onclick = "[AddWatchWindow( CharacterWindow.GetCharacter.MakeScope )]"
						}
						agot_portrait_editor_button = {}
					}
				}
			}

			flowcontainer = {
				parentanchor = bottom|left
				position = { 5 -5 }
				spacing = 5
				ignoreinvisible = yes
				direction = vertical

				button_normal = {
					name = "open_memories"

					size = { 35 35 }
					datacontext = "[Character]"
					tooltip = "OPEN_MEMORIES_TOOLTIP"
					using = tooltip_es

					icon_round_button_base = {}

					button_memories = {
						onclick = "[ToggleGameViewData( 'memories', Character.GetID  )]"
						size = { 25 25 }
						parentanchor = center
					}
				}
			}
		}

		############################
		### Character internal info
		hbox = {
			name = "character_info"
			layoutpolicy_horizontal = expanding
			margin = { 0 5 }
			margin_left = 5
			using = Animation_ShowHide_Quick
			visible = "[Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character_info').GetValue, '(CFixedPoint)0' ) )]"
			using = Animation_ShowHide_Quick


			background = {
				using = Background_Area_Dark
				margin_left = 5
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					name = "name_and_traits"
					layoutpolicy_horizontal = expanding

					using = Animation_Character_Window_Refresh
					margin = { 0 -2 }


					vbox = {
						name = "name_etc"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin = { 0 2 }

						## Name
						hbox = {
							layoutpolicy_horizontal = expanding
							margin = { 3 0 }
							margin_top = -2
							layoutpolicy_vertical = expanding

							agot_name_flavorization = {}

							text_single = {
								name = "character_age"
								raw_text = " [Character.GetAge]"
								default_format = "#low"
								tooltip = "[SelectLocalization( Character.MakeScope.Var('agot_birthplace').IsSet, 'AGOT_BIRTHPLACE', Character.GetDeathOrBirthDateInfo )]"
								fontsize = 20
								max_width = 48
								align = nobaseline
							}
							agot_fake_death_icons = {}

							expand = {}
						}

						hbox_character_relation_and_ai = {
							name = "character_relation_and_ai"
							margin = { 3 0 }
							#AGOT Added
							margin_top = -4
							margin_bottom = -4
						}
					}

					## Traits
					agot_trait_expanding_button = {}
				}

				divider_light = {
					layoutpolicy_horizontal = expanding
				}

				## Skills, Culture, Religion
				hbox = {
					name = "skills_culture_religion"
					layoutpolicy_horizontal = expanding

					background = {
						using = Background_Area
					}

					hbox = {
						name = "tutorial_highlight_skills"

						hbox = {
							name = "skills_grid"
							datamodel = "[CharacterWindow.GetSkills]"
							margin = { 2 0 }

							using = Animation_Character_Window_Refresh

							item = {
								vbox = {
									tooltip = "SKILL_ITEM_TOOLTIP"
									using = tooltip_ne
									spacing = -3

									icon = {
										name = "skill_icon"
										size = { 32 32 }
										framesize = { 60 60 }
										frame = "[SkillItem.GetFrame]"
										texture = "gfx/interface/icons/icon_skills.dds"
									}

									text_single = {
										name = "skill_value"
										text = "[SkillItem.GetValue]"
										default_format = "#high"
										align = nobaseline

										background = {
											name = "skill_icon_bg"
											texture = "gfx/interface/window_character/character_view_skills_bg.dds"
											frame = "[SkillItem.GetFrame]"
											framesize = { 70 26 }
											margin = { 10 0 }
										}
									}
								}
							}
						}

						hbox = {
							spacing = -5
							vbox = {
								tooltip = "[CharacterWindow.GetCharacter.GetProwessBreakdown]"
								using = tooltip_ne
								spacing = -3

								using = Animation_Character_Window_Refresh

								icon = {
									name = "prowess_icon"
									size = { 32 32 }
									texture = "gfx/interface/icons/icon_prowess.dds"
								}

								text_single = {
									name = "prowess_value"
									text = "[CharacterWindow.GetCharacter.GetProwess|0]"
									align = nobaseline
								}
							}
						}

						vbox = {
							tooltip = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_TT"
							using = tooltip_ne
							spacing = -3
							visible = "[Or( Character.GetGovernment.HasRule( 'administrative' ), And( And( Not( Character.HasLandedTitles ), Not( Character.HasLiege ) ), GetPlayer.GetGovernment.HasRule( 'administrative' ) ) )]"
							margin_right = 3

							using = Animation_Character_Window_Refresh

							icon = {
								name = "char_governor_efficiency_icon"
								size = { 32 32 }
								texture = "gfx/interface/icons/icon_skill_governor_efficiency.dds"
							}

							text_single = {
								name = "char_governor_efficiency_value"
								text = "ADMIN_WINDOW_THEME_GOVERNOR_EFFICIENCY_VALUE"
								align = nobaseline
							}
						}

						divider_light = {
							layoutpolicy_vertical = expanding
						}

						spacer = {
							size = { 5 5 }
						}
					}

					hbox = {
						name = "faith_and_culture"
						layoutpolicy_horizontal = expanding

						using = Animation_Character_Window_Refresh

						button_religion_icon = {
							name = "faith_button"
							datacontext = "[Character.GetFaith]"
							size = { 45 45 }
						}

						vbox = {
							layoutpolicy_horizontal = expanding

							button_tertiary = {
								datacontext = "[Character.GetFaith]"
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
								onclick = "[OpenGameViewData( 'faith', Faith.GetID )]"
								text = "FAITH_CHARACTER_WINDOW"
								default_format = "#clickable;italic"
								align = left|nobaseline
								margin_left = 5

								tooltipwidget = { faith_tooltip_click = {} }
							}

							button_tertiary = {
								datacontext = "[Character.GetCulture]"
								layoutpolicy_horizontal = expanding
								size = { 0 25 }
								onclick = "[OpenGameViewData( 'culture_window', Culture.GetID )]"
								text = "CULTURE_CHARACTER_WINDOW"
								default_format = "#clickable;italic"
								align = left|nobaseline
								margin_left = 5

								tooltipwidget = {
									culture_tooltip_click = {}
								}
							}
						}
					}

					expand = {}
				}
			}

			divider_light = {
				layoutpolicy_vertical = expanding
			}

			## House
			widget = {
				name = "house"
				datacontext = "[Character.GetHouse]"
				layoutpolicy_vertical = expanding
				size = { 120 0 }

				using = Animation_Character_Window_Refresh

				vbox = {
					expand = {
						maximumsize = { 0 5 }
					}

					coa_house_big = {
						flowcontainer = {
							name = "characters_status_in_house"
							parentanchor = bottom|right
							position = { -10 0 }
							ignoreinvisible = yes

							icon = {
								name = "bastard"
								visible = "[Not(Character.IsLegitimateMemberOfHouse)]"
								framesize = { 40 40 }
								frame = 4
								size = { 20 20 }
								texture = "gfx/interface/icons/portraits/relation.dds"
								tooltip = "CV_TT_BASTARD"
							}

							icon = {
								name = "head_icon"
								visible = "[LessThan_int32(Character.GetDynastyHeadRelationFrame('(bool)no'), '(int32)9')]"
								size = { 20 20 }

								texture = "gfx/interface/icons/portraits/relation.dds"
								framesize = { 40 40 }
								frame = "[Character.GetDynastyHeadRelationFrame('(bool)no')]"
								tooltip = "[Character.GetDynastyHeadTooltip]"
							}
						}
					}

					text_multi = {
						autoresize = yes
						maximumsize = { 118 50 }
						text = "[DynastyHouse.GetBaseNameNoTooltip]"
						default_format = "#high"
						align = top|hcenter
					}

					text_multi = {
						autoresize = yes
						maximumsize = { 118 50 }
						visible = "[Not(DynastyHouse.IsValid)]"
						text = "[lowborn|E]"
						default_format = "#high"
						align = top|hcenter
					}

					expand = {}
				}
				agot_personal_coat_of_arms = {}
			}
		}

		#########################
		### Realm, external info

		widget = {
			datacontext = "[GetIllustration( 'character_location_exterior' )]"
			layoutpolicy_horizontal = expanding
			size = { 0 232 }
			using = Animation_ShowHide_Quick
			visible = "[Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_realm').GetValue, '(CFixedPoint)0' ) )]"

			background = {
				using = Background_Bottom_Fade
				margin_bottom = 3
				alpha = 0.75
			}

			widget = {
				size = { 100% 100% }

				using = Animation_Character_Window_Refresh

				background = {
					texture = "[Illustration.GetTexture( Character.MakeScope )]"
					alpha = 0.35
					fittype = centercrop

					modify_texture = {
						texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
						blend_mode = alphamultiply
						mirror = vertical
					}

					using = Mask_Rough_Edges
				}
			}

			vbox = {
				name = "realm_info"
				min_width = 592

				hbox = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						name = "realm_shield"
						visible = "[Character.HasLandedTitles]"
						layoutpolicy_vertical = expanding
						spacing = 4
						margin_top = -4

						using = Animation_Character_Window_Refresh

						coa_realm_medium_crown = {
							datacontext = "[Character]"

							blockoverride "coa_button"
							{
								name = "realm_shield"
								tooltip = "[Character.GetDefaultRealmFlagTooltipPrimaryTitleClickInfo]"
								onclick = "[DefaultOnCoatOfArmsClick(Character.GetPrimaryTitle.GetID)]"
							}
						}

						vbox = {
							datacontext = "[CharacterWindow.GetCharacter]"
							visible = "[And( Not( Character.GetPrimaryTitle.HasFaction ), And( Character.HasLandedTitles, Character.IsAlive ) )]"
							tooltip = "[Character.GetDomainLimitTooltip]"
							spacing = -2

							background = {
								visible = "[GreaterThan_int32( Character.GetDomainSize, Character.GetDomainLimit )]"
								using = Status_Bad
							}
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						margin_left = 5

						## Realm name and stats
						hbox = {
							name = "name_and_stats"
							layoutpolicy_horizontal = expanding
							margin_right = 10

							using = Animation_Character_Window_Refresh

							vbox = {
								visible = "[Not(Character.HasLandedTitles)]"
								layoutpolicy_horizontal = expanding
								margin = { 10 0 }
								max_width = 280

								text_single = {
									name = "character_title"
									layoutpolicy_horizontal = expanding
									text = "CV_UNLANDED"
									using = Font_Size_Medium
									align = nobaseline
								}

								text_single = {
									name = "government_type"
									layoutpolicy_horizontal = expanding
									text = "[Character.GetLocationDesc]"
									default_format = "#low"
									format_override = { high medium }
									format_override = { V medium }
									align = nobaseline
									autoresize = no
								}
							}

							realm_name_and_type_vbox = {
								name = "realm_name_and_type"
								visible = "[Character.HasLandedTitles]"
								datacontext = "[Character.GetPrimaryTitle]"
								max_width = 350
							}

							expand = {}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_right = 2

							vbox_titles_claims_box = {
								visible = "[Not( Character.GetPrimaryTitle.HasFaction )]"
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding

								using = Animation_Character_Window_Refresh

								blockoverride "titles_extra_items"
								{
									visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetTitles), '(int32)8' )]"
									text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetTitles), '(int32)8' )|=]"
								}

								blockoverride "titles_max_slots"
								{
									datamodel_wrap = 8
								}

								blockoverride "claims_extra_items"
								{
									visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetClaims), '(int32)8' )]"
									text = "[GetNumberAbove_int32(GetDataModelSize(CharacterWindow.GetClaims), '(int32)8' )|=]"
								}

								blockoverride "claims_max_slots"
								{
									datamodel_wrap = 8
								}
							}

							expand = {
								layoutpolicy_horizontal = expanding
								visible = "[Character.GetPrimaryTitle.HasFaction]"
							}
							expand = {}
						}
						expand = {}
					}

					expand = {}

					vbox = {
						name = "diplomacy_items"

						layoutpolicy_vertical = expanding

						vbox_diplomacy_box = {
							visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetDiplomacyItems), '(int32)0' )]"
							margin_top = 4
							margin_right = 5
							using = Animation_Character_Window_Refresh

							blockoverride "diplomacy_extra_items"
							{
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetDiplomacyItems), '(int32)4' )]"
								text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetDiplomacyItems), '(int32)4' )|=]"
							}

							blockoverride "diplomacy_slots"
							{
								maxverticalslots = 2
								maxhorizontalslots = 2
								datamodel_wrap = 2
							}
						}
						expand = {}
					}
				}
			}
		}

		######################################################
		################### BOTTOM AREA ######################
		######################################################

		### TABS
		hbox = {
			name = "tabs"
			visible = "[And(CharacterWindow.AreNoneExpanded, Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character_sheet_bottom').GetValue, '(CFixedPoint)0' ) ))]"
			layoutpolicy_horizontal = expanding
			using = Animation_ShowHide_Quick
			margin = { 0 -4 }

			button_tab = {
				name = "family_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				layoutpolicy_horizontal = expanding

				onclick = "[CharacterWindow.SetTab('family')]"
				down = "[CharacterWindow.IsTabShown('family')]"

				using = tooltip_above

				hbox = {
					text_single = {
						layoutpolicy_horizontal = expanding
						align = center
						text = "CV_TAB_FAMILY"
						default_format = "#low"
					}

					text_single = {
						align = center
						text = "[CharacterWindow.GetTabItemsCount('family')]"
						default_format = "#low"
						margin_right = 15
						min_width = 30

						using = Animation_Character_Window_Refresh
					}
				}
			}

			button_tab = {
				name = "relations_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				layoutpolicy_horizontal = expanding

				onclick = "[CharacterWindow.SetTab('relations')]"
				down = "[CharacterWindow.IsTabShown('relations')]"

				using = tooltip_above

				hbox = {
					text_single = {
						layoutpolicy_horizontal = expanding
						align = center
						text = "CV_TAB_RELATIONS"
						default_format = "#low"
					}

					text_single = {
						align = center
						raw_text = "0"
						default_format = "#low"
						margin_right = 15
						min_width = 30

						using = Animation_Character_Window_Refresh
					}
				}
			}

			button_tab = {
				name = "court_button"
				datacontext = "[CharacterWindow.GetCharacter]"
				#	visible = "[Not(Character.IsPlayer)]"
				layoutpolicy_horizontal = expanding

				onclick = "[CharacterWindow.SetTab('court')]"
				down = "[CharacterWindow.IsTabShown('court')]"

				using = tooltip_above

				hbox = {
					text_single = {
						layoutpolicy_horizontal = expanding
						align = center
						text = "CV_TAB_COURT"
						default_format = "#low"
					}

					text_single = {
						align = center
						raw_text = "0"
						default_format = "#low"
						margin_right = 15
						min_width = 30

						using = Animation_Character_Window_Refresh
					}
				}
			}
		}

		spacer = { size = { 0 2 } }

		widget = {
			visible = "[CharacterWindow.AreNoneExpanded]"
			layoutpolicy_vertical = preferred
			layoutpolicy_horizontal = expanding
			size = { 0 350 }

			using = Animation_Tab_Switch

			####################################
			########### FAMILY TAB #############
			####################################

			widget = {
				name = "family"
				visible = "[And(CharacterWindow.IsTabShown('family'), Not( GreaterThan_CFixedPoint( GetPlayer.MakeScope.Var('hide_ui_character_sheet_bottom').GetValue, '(CFixedPoint)0' ) ))]"
				size = { 100% 100% }

				using = Animation_Tab_Switch

				vbox = {
					name = "family_main_view"
					visible = "[And( Not( Or(CharacterWindow.IsRelationExpanded( 'children' ), CharacterWindow.IsRelationExpanded( 'siblings' ) )), Not( CharacterWindow.IsRelationExpanded( 'spouses' ) ))]"

					widget = {
						name = "parents_grandparents_spouses"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						maximumsize = { -1 110 }
						scissor = yes

						hbox = {
							vbox_character_row_item = {
								name = "children"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetParents]"
								}

								blockoverride "header_text"
								{
									text = "PARENTS"
								}

								blockoverride "expand_button" {}
							}

							vbox_character_row_item = {
								name = "grandparents"
								visible = "[Not(Or(GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' ), GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )))]"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetGrandparents]"
								}

								blockoverride "header_text"
								{
									text = "GRANDPARENTS"
								}

								blockoverride "expand_button" {}
							}

							vbox_character_row_item = {
								name = "grandparents_contracted"
								visible = "[Or(GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' ), GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' ))]"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetGrandparents]"
								}

								blockoverride "header_text"
								{
									text = "GRANDPARENTS"
								}

								blockoverride "expand_button" {}

								blockoverride "gridbox"
								{
									overlappingitembox = {
										size = { 170 90 }

										block "portrait_datamodel" {
											datamodel = "[CharacterWindow.GetParents]"
										}

										item = {
											portrait_head_small = {
												blockoverride "portrait_button"
												{
													using = tooltip_ne
												}

											}
										}
									}
								}
							}
							#AGOT Added; Paramours
							agot_paramour_relationship_row = {}

							vbox_character_row_item = {
								name = "secondary_spouses"
								visible = "[GreaterThan_int32( Character.GetMaxSpouses, '(int32)1' )]"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetSecondarySpouses]"
									maxhorizontalslots = 4
								}

								blockoverride "header_text"
								{
									text = "AGOT_SECONDARY_SPOUSES"
								}

								blockoverride "expand_button_inside" {
									visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSecondarySpouses), '(int32)4' )]"
									onclick = "[CharacterWindow.ToggleExpandedRelation( 'spouses' )]"
								}

								blockoverride "remaining_items"
								{
									visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSecondarySpouses), '(int32)4' )]"
									text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetSecondarySpouses), '(int32)4' )|=]"
								}

								blockoverride "find_partner"
								{
									fixedgridbox = {
										name = "potential"
										datamodel = "[GetNullCharacterDataModel( Character.CalcUnusedSecondarySpouseSlots )]"
										visible = "[Character.IsPlayerInteractionShown('marry_off_interaction')]"

										flipdirection = yes
										addcolumn = 85
										addrow = 90

										item = {
											container = {
												portrait_head_small = {
													visible = "[Not( ObjectsEqual( GetPlayer, CharacterWindow.GetCharacter ) )]"

													blockoverride "portrait_button_template_onclick"
													{
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"
													}
													blockoverride "portrait_button_template_tooltip"
													{
														tooltip = "CHARACTER_WINDOW_FIND_SPOUSE"
													}
													blockoverride "onclick"
													{
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"

														button_icon = {
															parentanchor = center
															alwaystransparent = yes
															size = { 20 20 }
															position = {-5 -5}
															texture = "gfx/interface/icons/flat_icons/plus.dds"
														}
													}
												}

												portrait_head_small = {
													visible = "[ObjectsEqual( GetPlayer, CharacterWindow.GetCharacter )]"
													blockoverride "portrait_button_template_onclick"
													{
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"
													}
													blockoverride "portrait_button_template_tooltip"
													{
														tooltip = "CHARACTER_WINDOW_FIND_SPOUSE_SELF"
													}
													blockoverride "onclick"
													{
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('marry_off_interaction')]"

														button_icon = {
															parentanchor = center
															alwaystransparent = yes
															size = { 26 26 }
															position = {-5 0}
															texture = "gfx/interface/icons/flat_icons/plus.dds"
														}
													}
												}
											}
										}
									}
								}
							}

							vbox_character_row_item = {
								name = "consorts"
								visible = "[GreaterThan_int32( Character.GetMaxConsorts, '(int32)0' )]"
								layoutpolicy_vertical = expanding


								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetConcubines]"
								}

								blockoverride "header_text"
								{
									text = "CONCUBINES"
								}

								blockoverride "expand_button" {}

								blockoverride "find_partner"
								{
									fixedgridbox = {
										name = "potential"
										datamodel = "[GetNullCharacterDataModel( Character.CalcUnusedConsortSlots )]"
										visible = "[Character.IsPlayerInteractionShown('find_concubine')]"

										flipdirection = yes
										addcolumn = 85
										addrow = 90
										maxverticalslots = 1

										item = {
											container = {
												portrait_head_small = {
													blockoverride "portrait_button_template_onclick"
													{
														onclick = "[CharacterWindow.GetCharacter.OpenPlayerInteraction('find_concubine')]"
														enabled = "[CharacterWindow.GetCharacter.IsPlayerInteractionValid('find_concubine')]"

														button_plus = {
															parentanchor = center
															alwaystransparent = yes
														}
													}
													blockoverride "portrait_button_template_tooltip"
													{
														tooltip = "[CharacterWindow.GetCharacter.GetPlayerInteractionTooltip('find_concubine')]"
													}
												}
											}
										}
									}
								}
							}

							expand = {}
						}
					}

					widget = {
						name = "children"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						maximumsize = { -1 110 }
						scissor = yes

						vbox_character_row_item = {
							name = "children"

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetChildren]"
							}

							blockoverride "header_text"
							{
								text = "CV_CHILDREN_HEADING"
							}

							blockoverride "remaining_items"
							{
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )]"
								text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetChildren), '(int32)7' )]"
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'children' )]"
							}
						}
					}

					widget = {
						name = "siblings"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						maximumsize = { -1 110 }
						scissor = yes

						vbox_character_row_item = {
							name = "siblings"

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetSiblings]"
							}

							blockoverride "header_text"
							{
								text = "CV_SIBLINGS_HEADING"
							}

							blockoverride "remaining_items"
							{
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
								text = "[GetNumberAbove_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )|=]"
							}

							blockoverride "expand_button_inside" {
								visible = "[GreaterThan_int32( GetDataModelSize(CharacterWindow.GetSiblings), '(int32)7' )]"
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'siblings' )]"
							}
						}
					}

					expand = {}
				}

				### SIBLINGS EXPANDED
				scrollbox = {
					name = "family_siblings_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'siblings' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "siblings"
							margin_top = 10
							spacing = 5


							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetSiblings]"
							}

							blockoverride "header_text"
							{
								text = "CV_SIBLINGS_HEADING"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'siblings' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'siblings' )]"
							}

							blockoverride "gridbox_slots" {}
						}
					}
				}

				### CHILDREN EXPANDED
				scrollbox = {
					name = "family_children_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'children' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "children"
							margin_top = 10
							spacing = 5

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetChildren]"
							}

							blockoverride "header_text"
							{
								text = "CV_CHILDREN_HEADING"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'children' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'children' )]"
							}

							blockoverride "gridbox_slots" {}
						}
					}
				}

				scrollbox =	{
					name = "family_spouses_expanded"
					visible = "[CharacterWindow.IsRelationExpanded( 'spouses' )]"
					size = { 100% 100% }

					blockoverride "scrollbox_replace_vbox" {
						vbox_character_row_item = {
							name = "spouses"
							margin_top = 10
							spacing = 5

							blockoverride "portrait_datamodel" {
								datamodel = "[CharacterWindow.GetSecondarySpouses]"
							}

							blockoverride "header_text"
							{
								text = "AGOT_SECONDARY_SPOUSES"
							}

							blockoverride "expand_button_inside" {
								onclick = "[CharacterWindow.ToggleExpandedRelation( 'spouses' )]"
								down = "[CharacterWindow.IsRelationExpanded( 'spouses' )]"
							}

							blockoverride "gridbox_slots" {}
						}
					}
				}
			}

			####################################
			########## RELATIONS TAB ###########
			####################################

			widget = {
				name = "relations"
				visible = "[CharacterWindow.IsTabShown('relations')]"
				size = { 100% 100% }

				using = Animation_Tab_Switch

				vbox = {
					name = "relations_main_view"
					visible = "[And(Not(CharacterWindow.AreRelationsExpanded( 'friends', 'rivals', 'lovers') ), Not(CharacterWindow.IsRelationExpanded('grudges'))) ]"

					widget = {
						name = "first_row"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						maximumsize = { -1 110 }
						scissor = yes

						hbox = {
							#AGOT Added; Squires and Knights
							agot_squire_relationship_row = {}
							agot_knight_relationship_row = {}

							#AGOT Added; Bodyguards and their targets
							agot_bodyguard_relationship_row = {}
							agot_bodyguard_target_relationship_row = {}

							vbox_character_row_item = {
								name = "wards"
								visible = "[CharacterWindow.GetCharacter.IsAdult]"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'ward' ) )]"
								}

								blockoverride "header_text"
								{
									text = "WARDS_LABEL"
								}

								blockoverride "expand_button" {}

								### WARD FINDER
								blockoverride "find_partner" {}
							}

							vbox_character_row_item = {
								name = "guardian"
								visible = "[Not(CharacterWindow.GetCharacter.IsAdult)]"
								layoutpolicy_vertical = expanding

								blockoverride "portrait_datamodel" {
									datamodel = "[CharacterWindow.GetRelationsOfType( GetRelation( 'guardian' ) )]"
								}

								blockoverride "header_text"
								{
									text = "GUARDIAN_LABEL"
								}

								blockoverride "expand_button" {}

								### GUARDIAN FINDER
								blockoverride "find_partner" {}
							}
							expand = {}
						}
					}
				}
			}

			####################################
			############ COURT TAB #############
			####################################

			vbox_character_list = {
				datacontext = "[CharacterWindow.GetCourt]"
				visible = "[CharacterWindow.IsTabShown('court')]"

				blockoverride "sort_dropdown" {
					dropdown_sort_characterlist = {
						# unique name needed to distinct from vassal sort options
						name = "court_sort_options"
					}
				}

				blockoverride "scrollbox_margins" {
					margin_right = 15
					margin_top = 10
				}

				blockoverride "container_implementation" {}

				blockoverride "character_count" {}
			}

			####################################
			########### VASSALS TAB ############
			####################################

			vbox_character_list = {
				visible = "[CharacterWindow.IsTabShown('subjects')]"
				datacontext = "[CharacterWindow.GetVassals]"

				blockoverride "sort_dropdown" {
					dropdown_sort_characterlist = {
						# unique name needed to distinct from court sort options
						name = "vassal_sort_options"
					}
				}

				blockoverride "scrollbox_margins" {
					margin = { 0 5 }
					margin_right = 10
				}

				blockoverride "container_implementation" {
					fixedgridbox = {
						name = "characters_grid"
						datamodel = "[CharacterSelectionList.GetList]"
						visible = "[Not(CharacterSelectionList.IsBuildingList)]"
						addcolumn = 575
						addrow = 125
						setitemsizefromcell = yes

						item = {
							widget_vassal_list_item = {
								datacontext = "[CharacterListItem.GetCharacter]"

								blockoverride "vassal_buttons" {
									hbox = {
										layoutpolicy_horizontal = expanding

										text_single = {
											visible = "[And( Character.IsPowerfulVassal, Character.IsVassalOf( Character.GetOverlord ) )]"
											layoutpolicy_horizontal = expanding

											text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
											align = nobaseline
											max_width = 200
										}

										expand = {}
									}
								}
								blockoverride "own_vassal" {}

								blockoverride "realm_size_powerful_status" {
									hbox = {
										spacing = 10

										text_single = {
											visible = "[NotEqualTo_int32(Character.GetPrimaryTitle.GetTierFrame, '(int32)2')]" #nonbaron
											layoutpolicy_horizontal = expanding

											text = "REALM_WINDOW_SIZE"
											align = nobaseline
											max_width = 200

											tooltip = "REALM_WINDOW_SIZE_TT"
										}

										expand = {}
									}
								}

								blockoverride "release_tributary_button" {}
							}
						}
					}
				}

				blockoverride "character_count"
				{
					hbox = {
						layoutpolicy_horizontal = growing
						margin = { 15 0 }
						margin_bottom = 5
						spacing = 5

						block "bottom_bar" {}

						expand = {}

						widget = {
							size = { 20 15 }

							warning_icon = {
								size = { 20 20 }
								visible = "[Not( CharacterSelectionList.IsAllDefault )]"
								tooltip = "CHARACTER_FINDER_FILTER_SET"
							}
						}

						text_single = {
							name = "character_count"
							datacontext = "[CharacterSelectionList]"
							text = "CHARACTER_FINDER_COUNT"
							default_format = "#low"
						}
					}
				}
			}
		}

		### EXPANDED VIEWS

		# TRAITS EXPANDED
		scrollbox = {
			name = "traits_expanded"
			visible = "[CharacterWindow.AreTraitsExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 10
				agot_expanded_traits_vbox = {}
			}
		}

		# TITLES EXPANDED
		scrollbox = {
			name = "titles_expanded"
			visible = "[CharacterWindow.AreTitlesExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15

				text_label_center = {
					text = "CV_TITLES_NOCOUNT"
				}

				fixedgridbox = {
					name = "titles_box_bishop"
					datacontext = "[CharacterWindow.GetCharacter]"
					flipdirection = yes
					addrow = 90
					addcolumn = 270
					datamodel_wrap = 2

					datamodel = "[CharacterWindow.GetTitles]"

					item = {
						flowcontainer = {
							datacontext = "[TitleItem.GetTitle]"
							spacing = 5

							coa_title_small_crown = {
								using = tooltip_ne
							}

							text_multi = {
								text = "[Title.GetNameNoTooltip]"
								parentanchor = vcenter
								autoresize = yes
								default_format = "#high"
								using = Font_Size_Medium
								max_width = 190
								margin_top = 5
							}
						}
					}
				}
			}
		}

		# CLAIMS EXPANDED
		scrollbox = {
			name = "claims_expanded"
			visible = "[CharacterWindow.AreClaimsExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 10

				text_label_center = {
					text = "CV_CLAIMS_NOCOUNT"
				}

				flowcontainer = {
					name = "titles_box_bishop"
					datacontext = "[CharacterWindow.GetCharacter]"
					datamodel = "[CharacterWindow.GetClaims]"
					direction = vertical
					spacing = 10

					item = {
						flowcontainer = {
							spacing = 5
							using = tooltip_ne
							tooltip = "[Claim.GetTooltip]"

							coa_title_medium = {
								datacontext = "[Claim.GetTitle]"
							}

							flowcontainer = {
								direction = vertical
								ignoreinvisible = yes

								text_single = {
									text = "[Claim.GetTitle.GetNameNoTooltip|U]"
									default_format = "#high"
									using = Font_Size_Big
								}

								text_single = {
									name = "pressed_claim"
									visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
									text = "[pressed_claim_i][pressed_claim|E]"
								}

								text_single = {
									name = "unpressed_claim"
									visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
									text = "[unpressed_claim_i][unpressed_claim|E]"
								}

								text_single = {
									name = "implicit_claim"
									visible = "[Claim.IsImplicit]"
									text = "[implicit_claim_i][implicit_claim|E]"
								}

								text_multi = {
									visible = "[Claim.GetTitle.GetHolder.IsValid]"
									text = "CLAIM_TITLE_HOLDER"
									max_width = 400
									autoresize = yes
								}

								text_single = {
									visible = "[Not(Claim.GetTitle.GetHolder.IsValid)]"
									text = "CLAIM_TITLE_NOT_CREATED"
									default_format = "#weak"
									align = nobaseline
								}
							}
						}
					}
				}
			}
		}

		# DIPLOMACY EXPANDED
		scrollbox = {
			name = "diplomacy_expanded"
			visible = "[CharacterWindow.AreDiplomacyExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15

				text_label_center = {
					text = "CV_DIPLOMACY"
				}

				vbox = {
					name = "diplomacy_items"
					datamodel = "[CharacterWindow.GetDiplomacyItems]"
					layoutpolicy_horizontal = expanding

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 10

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							button_group = {
								layoutpolicy_horizontal = expanding
								alwaystransparent = "[DiplomacyItem.IsConfederation]"

								onclick = "[DiplomacyItem.OnClick]"

								tooltip = "[DiplomacyItem.GetTooltip]"
								using = tooltip_se

								hbox = {
									widget = {
										size = { 65 74 }

										button = {
											parentanchor = top|hcenter
											alwaystransparent = "[DiplomacyItem.IsConfederation]"
											position = { 0 -30 }
											size = { 50 50 }
											texture = "gfx/interface/icons/diplomatic_icons.dds"
											frame = "[DiplomacyItem.GetDiplomacyFrame]"
											framesize = { 120 120 }
											scale = 1.3

											tooltip_visible = no
										}

										coa_realm_medium = {
											visible = "[And(Not(DiplomacyItem.IsStruggle), Not(DiplomacyItem.IsConfederation))]"
											datacontext = "[DiplomacyItem.GetTargetCharacter]"
											parentanchor = hcenter

											tooltip = "[DiplomacyItem.GetTooltip]"

											text_single = {
												name = "warscore"
												visible = "[DiplomacyItem.HasWarScore]"
												parentanchor = hcenter
												position = { 0 -20 }

												text = "[DiplomacyItem.GetWarScoreFraction|0%=+]"
												align = nobaseline
												using = Font_Size_Medium

												background = {
													using = Background_Area_ExtraDark
													margin = { 3 1 }
												}
											}
										}

										coa_confederation_medium = {
											datacontext = "[DiplomacyItem.GetConfederation]"
											visible = "[DiplomacyItem.IsConfederation]"
											parentanchor = hcenter
										}

										button = {
											datacontext = "[DiplomacyItem.GetStruggle]"
											datacontext = "[DiplomacyItem.GetTargetCharacter]"
											visible = "[DiplomacyItem.IsStruggle]"
											position = { 0 -3 }
											size = { 70 90 }

											onclick = "[DiplomacyItem.OnClick]"

											tooltipwidget = struggle_tooltip
											using = tooltip_es
											tooltip_offset = { 0 22 }

											widget_struggle_icon = {}
										}
									}

									text_multi = {
										layoutpolicy_horizontal = expanding
										alwaystransparent = "[DiplomacyItem.IsConfederation]"

										text = "[DiplomacyItem.GetInfo]"
										autoresize = yes
										max_width = 450
										min_height = 120
										using = Font_Size_Tiny
									}
								}
							}

							hbox = {
								name = "reason_characters"
								visible = "[DiplomacyItem.HasReasonCharacters]"
								margin_bottom = 10

								portrait_head_small = {
									name = "reason_character_left"
									datacontext = "[DiplomacyItem.GetLeftReasonCharacter]"
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}
								}

								portrait_head_small = {
									name = "reason_character_right"
									datacontext = "[DiplomacyItem.GetRightReasonCharacter]"
									blockoverride "opinion_box" {}
									blockoverride "status_icons" {}

									blockoverride "portrait_transformation"
									{
										portrait_scale = { -1 1 }
										portrait_offset = { 1 0 }
									}
								}
							}
						}
					}
				}
			}
		}

		# Modifiers expanded
		scrollbox = {
			name = "modifiers_expanded"
			visible = "[CharacterWindow.AreModifiersExpanded]"
			layoutpolicy_vertical = expanding
			layoutpolicy_horizontal = expanding

			using = Animation_Tab_Switch

			blockoverride "scrollbox_content"
			{
				spacing = 15
				agot_expanded_modifiers_vbox = {}
			}
		}
	}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

	type agot_fake_death_icons = hbox
	{
		margin_left = 4
		spacing = -3

		icon = {
			visible = "[GetScriptedGui('fake_death_char_tbc').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			size = { 23 23 }
			texture = "gfx/interface/icons/character_status/icon_dead.dds"
			tooltip = "CHARACTER_DEAD_AGOT_RES_TBC_TOOLTIP"
		}
		icon = {
			visible = "[GetScriptedGui('fake_death_char_battle').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			size = { 23 23 }
			texture = "gfx/interface/icons/character_status/icon_dead.dds"
			tooltip = "CHARACTER_DEAD_AGOT_RES_BATTLE_TOOLTIP"
		}
		icon = {
			visible = "[GetScriptedGui('fake_death_char_illness').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			size = { 23 23 }
			texture = "gfx/interface/icons/character_status/icon_dead.dds"
			tooltip = "CHARACTER_DEAD_AGOT_RES_ILLNESS_TOOLTIP"
		}
		icon = {
			visible = "[GetScriptedGui('fake_death_char_siege').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			size = { 23 23 }
			texture = "gfx/interface/icons/character_status/icon_dead.dds"
			tooltip = "CHARACTER_DEAD_AGOT_RES_SIEGE_TOOLTIP"
		}
		icon = {
			visible = "[GetScriptedGui('fake_death_char_accident').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
			size = { 23 23 }
			texture = "gfx/interface/icons/character_status/icon_dead.dds"
			tooltip = "CHARACTER_DEAD_AGOT_RES_ACCIDENT_TOOLTIP"
		}
	}
}

template visible_if_not_fake_death {
	visible = "[Not(GetScriptedGui('fake_death_char').IsShown(GuiScope.SetRoot(Character.MakeScope).End))]"
}

template visible_if_fake_death {
	visible = "[GetScriptedGui('fake_death_char').IsShown(GuiScope.SetRoot(Character.MakeScope).End)]"
}