window = {
	name = "dragon_duel_event"
	size = { 1440 650 }

	parentanchor = center
	widgetanchor = center
	layer = events
	alpha = 0

	datacontext = "[EventWindow.AccessEventWindowData]"

	widget = {
		visible = "[Not(GameHasMultiplePlayers)]"
		size = { 100% 100% }

		icon = {
			visible = "[Not(GetVariableSystem.Exists( 'event_window_mouse_leave'))]"
			parentanchor = center
			size = { 200% 200% }
			alwaystransparent = yes
			texture = "gfx/interface/component_masks/mask_fade_circle.dds"
			color = { 0.1 0.1 0.1 1 }
			alpha = 0

			state = {
				name = appear
				trigger_on_create = yes
				delay = 0.2
				using = Animation_Curve_Default
				alpha = 0.6
				duration = 0.8
			}

			state = {
				name = _hide
				using = Animation_Curve_Default
				duration = 3
				alpha = 0
			}
		}
	}

	widget = {
		size = { 100% 83% }
		using = Window_Background
		using = Window_Decoration_Frontend_Flat_Bottom
		parentanchor = bottom
	}

	state = {
		name = show
		trigger_on_create = yes
		using = Animation_FadeIn_Standard
		using = Sound_Panel_Popup_Snapshot
		duration = 0.7

		on_start = "[GetVariableSystem.Clear( 'event_window_mouse_leave')]"

		start_sound = {
			soundeffect = "event:/SFX/Events/Panels/sfx_event_panel_large"

			soundparam = {
				name = StateChange
				value = 1
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Standard

		start_sound = {
			soundeffect = "event:/MUSIC/Cues/Events/kill_mx_cue"
		}
	}

	state = {
		name = _mouse_hierarchy_leave
		on_start = "[GetVariableSystem.Set( 'event_window_mouse_leave', 'true' )]"
	}

	widget = {
		layoutpolicy_horizontal = expanding
		size = { 1440 134 }

		icon = {
			name = "theme_header"
			parentanchor = center
			size = { 1400 134 }
			texture = "gfx/interface/window_duel_event_window/header_duel.dds"

			modify_texture = {
				name = overlay
				texture = "gfx/interface/component_effects/effect_header_blue_shine.dds"
				blend_mode = colordodge
				translate_uv = { 0.6 0 }
			}

			state = {
				name = right
				next = left

				duration = 8
				bezier = { 0.8 0.18 0.96 .05 }

				modify_texture = {
					name = overlay
					translate_uv = { -0.6 0 }
				}
			}

			state = {
				name = left
				next = right

				duration = 0.0
				delay = 5

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}

			state = {
				trigger_on_create = yes
				name = start
				next = right

				duration = 0.0

				modify_texture = {
					name = overlay
					translate_uv = { 0.6 0 }
				}
			}
		}

		icon = {
			name = "duel_window_decoration"
			size = { 1400 134 }
			parentanchor = center
			texture = "gfx/interface/window_duel_event_window/decoration_frame_top_duel.dds"
		}

		text_single = {
			name = "title"
			parentanchor = center
			fontsize = 29
			fontsize_min = 16
			position = { 0 28 }
			text = "[EventWindowData.GetTitle]"
			default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
			using = Font_Type_Flavor
			max_width = 950

			alpha = 0

			state = {
				name = start
				trigger_on_create = yes
				delay = 0.2
				using = Animation_Curve_Default
				alpha = 1
				duration = 0.5
			}
		}
	}

	vbox = { # Event shaders (behind character portraits)
		name = "agot_shader_event_background"
		margin = { 30 15 }
		layoutpolicy_horizontal = expanding
	}

	vbox = {
		widget = {
			name = "duel_event_content"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			dragon_event_window_background_widget = {
				margin = { 40 20 }
				margin_top = 130
			}

			### CHARACTERS
			widget = {
				name = "characters"
				parentanchor = bottom
				size = { 100% 100% }
				scissor = yes

				alpha = 0

				state = {
					name = appear
					trigger_on_create = yes
					delay = 0.5
					using = Animation_Curve_Default
					alpha = 1
					duration = 0.5
				}

				### LEFT CHARACTER ###
				widget = {
					name = "portrait_left"
					parentanchor = bottom|left
					position = { -85 0 } # 40 to -85
					size = { 300 500 }

					allow_outside = no

					portrait_event_duel = {
						name = "portrait_left"
						datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
						visible = "[And(EventWindowData.HasPortraitCharacter('left_portrait'), EventWindowData.HasPortraitCharacter('right_portrait'))]"
						parentanchor = bottom|left
						position = { -60 -18 }
						size = { 930 500 }

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('left_portrait', 'camera_event_duel_left', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('left_portrait'))]"

							tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
							using = tooltip_ws
							tooltip_offset = { -150 0 }
						}

						blockoverride "grayscale" {}
					}
				}

				### RIGHT CHARACTER ###
				widget = {
					name = "portrait_right"
					parentanchor = bottom|right
					position = { 145 0 } # -40 to 145
					size = { 300 500 }

					allow_outside = no

					portrait_event_duel = {
						name = "portrait_right"
						datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
						visible = "[EventWindowData.HasPortraitCharacter('right_portrait')]"
						parentanchor = bottom|right
						position = { -0 -18 }
						size = { 930 500 }

						blockoverride "portrait_button"
						{
							portrait_texture = "[EventWindowData.GetAnimatedEventPortraitTexture('right_portrait', 'camera_event_duel_right', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
							alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('right_portrait'))]"

							tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
							tooltip_offset = { -40 0 }
							using = tooltip_es
						}

						blockoverride "grayscale" {}
					}
				}

				### COA
				margin_widget = {
					name = "coa"
					parentanchor = bottom|hcenter
					size = { 100% 170 }
					margin_bottom = 20 # 30 to 20
					allow_outside = yes

					flowcontainer = {
						spacing = 1150 # 920 to 1150
						parentanchor = bottom|hcenter

						flowcontainer = {
							name = "coa_left"
							parentanchor = bottom
							direction = vertical
							ignoreinvisible = yes

							event_portrait_status_icons_left = {
								datacontext = "[EventWindowData.GetPortraitCharacter('left_portrait')]"
								visible = "[EventWindowData.ShouldShowPortraitInfo('left_portrait')]"
							}

							spacer = {
								size = { 140 0 }
							}

							widget = {
								datacontext = "[EventWindowData.GetPortraitCharacter('lower_left_portrait')]"
								visible = "[EventWindowData.HasPortraitCharacter('lower_left_portrait')]"
								size = { 140 150 }

								portrait_event_small = {
									name = "portrait_left_small_1"
									parentanchor = center
									position = { 0 -4 }

									blockoverride "portrait_button"
									{
										portrait_texture = "[EventWindowData.GetStaticEventPortraitTexture('lower_left_portrait', 'camera_shoulders', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
										alwaystransparent = "[Not(EventWindowData.ShouldShowPortraitInfo('lower_left_portrait'))]"
										tooltip_visible = "[EventWindowData.ShouldShowPortraitInfo('lower_left_portrait')]"
									}

									blockoverride "highlight_visible"
									{
										visible = "[Or(Character.IsHovered, EventWindowData.IsCharacterHighlighted( EventWindowData.GetPortraitCharacter('lower_left_portrait') ))]"
									}

									blockoverride "status_icons" {}
									blockoverride "opinion_box" {}
									blockoverride "grayscale" {}

									blockoverride "coa"
									{
										event_portrait_status_icons_left = {
											visible = "[EventWindowData.ShouldShowPortraitInfo('lower_right_portrait')]"
											parentanchor = bottom|left
											position = { -15 -5 }
											scale = 0.8
										}
									}

									text_label_center = {
										parentanchor = bottom|hcenter
										position = { 20 -5 }
										alwaystransparent = yes
										#AGOT Modified
										# text = "[Character.GetShortUINameNoTooltip]"
										raw_text = "#high [Character.Custom('AGOTCustomGetTitledFirstName')]#!"
										max_width = 115
										align = center
										fontsize_min = 12
									}
								}
							}
						}

						flowcontainer = {
							name = "coa_right"
							parentanchor = bottom
							direction = vertical
							ignoreinvisible = yes

							event_portrait_status_icons_right = {
								datacontext = "[EventWindowData.GetPortraitCharacter('right_portrait')]"
								visible = "[EventWindowData.ShouldShowPortraitInfo('right_portrait')]"
								parentanchor = right
							}
						}
					}
				}
			}

			### EVENT
			hbox = {
				name = "event_text_box"
				margin_top = 120

				widget = {
					name = "text"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					vbox = {
						name = "description_and_options"

						state = {
							name = appear
							trigger_on_create = yes
							delay = 0.2
							using = Animation_Curve_Default
							alpha = 1
							duration = 1.5
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							margin_top = 20

							agot_dragon_duel_standard_text = {}
							agot_dragon_duel_dark_text = {}
							agot_dragon_duel_light_text = {}
						}

						vbox = {
							allow_outside = yes
							ignoreinvisible = yes
							spacing = 5
							margin_bottom = 25

							fixedgridbox = {
								name = "option_grid"
								addcolumn = 500
								addrow = 42
								datamodel = "[EventWindowData.GetOptions]"

								item = {
									button_eventoption = {}
								}
							}
						}
					}
				}
			}
		}
	}

	vbox = { # Event shaders (in front of character portraits)
		name = "agot_shader_event_foreground"
		margin = { 30 15 }
		layoutpolicy_horizontal = expanding
	}

	flowcontainer = {
		name = "debug_stuff"
		visible = "[InDebugMode]"
		parentanchor = top|right
		position = { -40 135 }
		ignoreinvisible = yes

		button_round = {
			alwaystransparent = no
			tooltip = "REGENERATE_EVENT_CONTENTS"
			using = tooltip_below

			using = Animation_ShowHide_Quick
			onclick = "[EventWindow.ResetContents]"

			button_replace = {
				parentanchor = center
				alwaystransparent = yes
			}
		}

		button_round = {
			size = { 40 40 }

			button_icon = {
				size = { 100% 100% }
				texture = "gfx/interface/icons/flat_icons/data_system.dds"
				tooltip = "TOGGLE_DATA_SYSTEM"
				using = tooltip_below
				onclick = "[ExecuteConsoleCommand('Localization.ToggleSkipDataSystemInLocOutput')]"
				fontsize = 24
			}
		}

		button_round = {
			size = { 40 40 }
			button_copy = {
				parentanchor = center
				onclick = "[EventWindowData.CopyToClipboard]"
				tooltip = "COPY_EVENT_CONTENTS"
			}
		}

		container = {
			tooltip = "[EventWindowData.GetTriggerBreakdown]"
			using = tooltip_below
			icon = {
				visible = "[EventWindowData.IsTriggerFulfilled]"
				size = { 40 40 }
				texture = "gfx/interface/icons/symbols/icon_check.dds"
			}

			icon = {
				visible = "[Not( EventWindowData.IsTriggerFulfilled )]"
				size = { 40 40 }
				texture = "gfx/interface/icons/symbols/icon_cross.dds"
			}
		}

		button = {
			name = "debug_icon"
			size = { 40 40 }

			button = {
				size = { 100% 100% }
				tooltip = "[EventWindowData.GetDebugInfo]"
				using = tooltip_below
				onclick = "[EventWindowData.CopyToClipboard]"
				onrightclick = "[EventWindowData.DebugOpen]"
				button_ignore = none
				raw_text = "?"
				fontsize = 24
			}
		}
	}
}
